#!/bin/bash

# Automated System Information Report Script

# Log file location
LOG_FILE="system_report.txt"

# Get the current user and timestamp
USER=$(whoami)
TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")

# Function to create a table header with top border
create_table_header() {
    echo "+------------------+------------------+------------------+------------------+" | tee -a "$LOG_FILE"
    printf "| %-16s | %-16s | %-16s | %-16s |\n" "$1" "$2" "$3" "$4" | tee -a "$LOG_FILE"
    echo "+------------------+------------------+------------------+------------------+" | tee -a "$LOG_FILE"
}

# Function to create a table row with vertical separators
create_table_row() {
    printf "| %-16s | %-16s | %-16s | %-16s |\n" "$1" "$2" "$3" "$4" | tee -a "$LOG_FILE"
    echo "+------------------+------------------+------------------+------------------+" | tee -a "$LOG_FILE"
}

# Write the header information to the log file
echo "+--------------------------------------------------------------------------+" | tee -a "$LOG_FILE"
printf "| %-72s |\n" "System Information Report" | tee -a "$LOG_FILE"
echo "+--------------------------------------------------------------------------+" | tee -a "$LOG_FILE"
printf "| %-36s | %-36s |\n" "Generated by: $USER" "Timestamp: $TIMESTAMP" | tee -a "$LOG_FILE"
echo "+--------------------------------------------------------------------------+" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

# Display a welcome message and prompt the user to choose which information to include in the report
echo "Welcome to the System Information Report Generator"
echo "What information would you like to include in the report?"
echo "1. CPU Information"
echo "2. Memory Usage"
echo "3. Disk Usage"
echo "4. Network Configuration"
echo "5. Running Processes"
echo "6. All of the above"

# The `read` command is used to take input from the user.
read -p "Enter your choice (1-6): " choice

# The `case` statement allows us to perform different actions based on the value of the variable `choice`.
case $choice in
    1) 
        echo "Generating CPU Information..." | tee -a "$LOG_FILE"
        create_table_header "CPU Information" "" "" ""
        lscpu | awk -F: '{ printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", $1, $2, "", "" }' | tee -a "$LOG_FILE"
        ;;
    2) 
        echo "Generating Memory Usage Information..." | tee -a "$LOG_FILE"
        create_table_header "Memory Usage" "" "" ""
        free -h | awk 'NR==1{printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", $1, $2, $3, ""} NR==2{printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", $1, $2, $3, ""}' | tee -a "$LOG_FILE"
        ;;
    3) 
        echo "Generating Disk Usage Information..." | tee -a "$LOG_FILE"
        create_table_header "Disk Usage" "" "" ""
        df -h | awk 'NR==1{printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", $1, $2, $3, $4} NR>1{printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", $1, $2, $3, $4}' | tee -a "$LOG_FILE"
        ;;
    4) 
        echo "Generating Network Configuration Information..." | tee -a "$LOG_FILE"
        create_table_header "Network Configuration" "" "" ""
        
        # Check if the script is running on Linux or macOS
        if command -v ip > /dev/null; then
            ip a | awk -F: '/^[0-9]+:/{iface=$2} /inet /{printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", iface, $2, "", ""}' | tee -a "$LOG_FILE"
        elif command -v ifconfig > /dev/null; then
            ifconfig | awk '/^[a-z]/ { iface=$1 } /inet / { printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", iface, $2, "", "" }' | tee -a "$LOG_FILE"
        elif command -v ipconfig > /dev/null; then
            ipconfig | awk '/[A-Za-z].*:/ { iface=$1 } /IPv4 Address/ { printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", iface, $NF, "", "" }' | tee -a "$LOG_FILE"
        else
            create_table_row "Error" "No valid network command found!" "" ""
        fi
        ;;
    5) 
        echo "Generating Running Processes Information..." | tee -a "$LOG_FILE"
        create_table_header "Running Processes" "" "" ""
        ps aux --sort=-%cpu | awk 'NR==1{printf "| %-8s | %-6s | %-10s | %-16s |\n+------------------+------------------+------------------+------------------+\n", $1, $2, $3, $11} NR>1{printf "| %-8s | %-6s | %-10s | %-16s |\n+------------------+------------------+------------------+------------------+\n", $1, $2, $3, $11}' | tee -a "$LOG_FILE"
        ;;
    6) 
        echo "Generating Full System Information Report..." | tee -a "$LOG_FILE"
        create_table_header "CPU Information" "" "" ""
        lscpu | awk -F: '{ printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", $1, $2, "", "" }' | tee -a "$LOG_FILE"
        create_table_header "Memory Usage" "" "" ""
        free -h | awk 'NR==1{printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", $1, $2, $3, ""} NR==2{printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", $1, $2, $3, ""}' | tee -a "$LOG_FILE"
        create_table_header "Disk Usage" "" "" ""
        df -h | awk 'NR==1{printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", $1, $2, $3, $4} NR>1{printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", $1, $2, $3, $4}' | tee -a "$LOG_FILE"
        create_table_header "Network Configuration" "" "" ""
        if command -v ip > /dev/null; then
            ip a | awk -F: '/^[0-9]+:/{iface=$2} /inet /{printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", iface, $2, "", ""}' | tee -a "$LOG_FILE"
        elif command -v ifconfig > /dev/null; then
            ifconfig | awk '/^[a-z]/ { iface=$1 } /inet / { printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", iface, $2, "", "" }' | tee -a "$LOG_FILE"
        elif command -v ipconfig > /dev/null; then
            ipconfig | awk '/[A-Za-z].*:/ { iface=$1 } /IPv4 Address/ { printf "| %-16s | %-16s | %-16s | %-16s |\n+------------------+------------------+------------------+------------------+\n", iface, $NF, "", "" }' | tee -a "$LOG_FILE"
        fi
        create_table_header "Running Processes" "" "" ""
        ps aux --sort=-%cpu | awk 'NR==1{printf "| %-8s | %-6s | %-10s | %-16s |\n+------------------+------------------+------------------+------------------+\n", $1, $2, $3, $11} NR>1{printf "| %-8s | %-6s | %-10s | %-16s |\n+------------------+------------------+------------------+------------------+\n", $1, $2, $3, $11}' | tee -a "$LOG_FILE"
        ;;
    *) 
        echo "Invalid choice! Please run the script again and select a valid option." | tee -a "$LOG_FILE"
        ;;
esac

# End of script
echo "Report saved to $LOG_FILE"
